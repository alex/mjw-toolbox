# TODO(weaver) : ipv6
# Remember to raise pflogd's snaplen on a new machine:
# # doas rcctl set pflogd flags "-s 512"
dmz="{ em1, em2, em3 }"
ext_if=vether0
wifi_if=em4
disk_if=em5
disk="192.168.221.2"
haven_if=em6
int_if=em7
nodeless="{ 100.36.223.10, \
  100.36.223.11, \
  100.36.223.12, \
  100.36.223.13, \
  100.36.223.14 }"
o_int="192.168.223.2"
uplink=em0

set limit { \
  states 100000, \
  src-nodes 100000, \
  tables 10000, \
  table-entries 500000 }
set skip on { lo, bridge0 }
set state-defaults pflow
block drop log

# tables used to filter bad actors
table <sshbots> counters persist file "/etc/pf.sshbots"

# TODO(weaver) : aggressively filter here based on actual services.
block drop in log quick on $uplink inet from { <sshbots> } to any

# TODO(weaver) : logging of all interesting traffic here.
pass in log quick on $uplink from any to $nodeless keep state
pass out log quick on $uplink from $nodeless to any keep state

# TODO(weaver) : aggressively filter here based on actual services.
pass in quick on $dmz from $nodeless to any keep state
pass out quick on $dmz from any to $nodeless keep state
pass in on $dmz proto udp from port 68 to port 67
pass out on $dmz proto udp from port 67 to port 68

# external interface
pass out log quick on $ext_if \
  from { $disk_if:network, $haven_if:network, $int_if:network, \
         $wifi_if:network } \
  nat-to $ext_if:0 keep state
pass out log quick on $ext_if from $ext_if:0 keep state
pass in log quick on $ext_if proto tcp from any to $ext_if:0 port 22774 rdr-to $disk keep state
pass in log on $ext_if proto tcp from any to $ext_if:0 \
  port { https, ssh } keep state
pass in log on $ext_if inet proto icmp \
  from $nodeless to $ext_if:0 \
  icmp-type 8 code 0 keep state
pass in log on $ext_if proto tcp \
  from $nodeless to $ext_if:0 \
  port { domain, https, www, 853 } keep state
pass in log on $ext_if proto udp \
  from $nodeless to $ext_if:0 \
  port { domain, ntp, tftp } keep state
pass in log on $ext_if proto udp from port 68 to port 67
pass out log on $ext_if proto udp from port 67 to port 68

# wifi-facing physical interface
pass in on $wifi_if proto tcp \
  from $wifi_if:network to $wifi_if:0 \
  port { domain, https, ssh, www } keep state
pass in on $wifi_if proto udp \
  from $wifi_if:network to $wifi_if:0 \
  port { domain, ntp } keep state
pass in on $wifi_if proto udp from port 68 to port 67
pass out on $wifi_if proto udp from port 67 to port 68
pass in log quick on $wifi_if from $wifi_if:network to any keep state
pass out log quick on $wifi_if from $wifi_if:0 to $wifi_if:network 

# disk-facing physical interface
pass in on $disk_if proto tcp \
  from $disk_if:network to $disk_if:0 \
  port { domain, https, ssh, www } keep state
pass in on $disk_if proto udp \
  from $disk_if:network to $disk_if:0 \
  port { domain, ntp } keep state
pass in on $disk_if proto udp from port 68 to port 67
pass out on $disk_if proto udp from port 67 to port 68
pass in log quick on $disk_if from $disk_if:network to any keep state
pass out log quick on $disk_if proto tcp \
  from $disk_if:0 to $disk \
  port { nfsd, ssh } keep state
pass out log quick on $disk_if \
  from { $int_if:network, $wifi_if:network } to $disk_if:network \
  keep state

# haven-facing physical interface
pass in on $haven_if proto tcp \
  from $haven_if:network to $haven_if:0 \
  port { domain, https, ssh, www } keep state
pass in on $haven_if proto udp \
  from $haven_if:network to $haven_if:0 \
  port { domain, ntp } keep state
pass in on $haven_if proto udp from port 68 to port 67
pass out on $haven_if proto udp from port 67 to port 68
pass in log quick on $haven_if proto tcp \
  from $haven_if:network to any \
  port { https, ssh } keep state
pass out log quick on $haven_if proto tcp \
  from $haven_if:0 to $haven_if:network \
  port { ssh } keep state

# lan-facing physical interface
pass in on $int_if proto tcp \
  from $int_if:network to $int_if:0 \
  port { domain, https, ssh, www, 3000 } keep state
pass in on $int_if proto udp \
  from $int_if:network to $int_if:0 \
  port { domain, ntp } keep state
pass in on $int_if proto udp from port 68 to port 67
pass out on $int_if proto udp from port 67 to port 68
pass in log quick on $int_if from $int_if:network to any keep state
pass out on $int_if from $int_if:0 to $int_if:network 
